tosca_definitions_version: tosca_simple_yaml_1_0

#---------------------------------------------------------------------------
# Copyright (c) 2019 Contributors to the RADON project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#---------------------------------------------------------------------------

# see https://github.com/apache/openwhisk-package-kafka#creating-a-trigger-that-listens-to-a-generic-kafka-instance

relationship_types:
  radon.relationships.apache.openwhisk.KafkaTriggers:
    derived_from: radon.relationships.abstract.Triggers
    description: OpenWhisk-specific relationship type representing Kafka-to-OpenWhisk Function communication
    properties:
      events:
        constraints:
          - length: 1
      trigger_name:
        description: the name of the trigger created by this relationship. Used for proper cleanup when the relationship is removed.
        type: string
    interfaces:
      Configure:
        post_configure_target:
          description: creates an OpenWhisk trigger based on the Kafka feed, and associates the trigger with the function via a rule.
          inputs:
            BROKERS:
              type: list
              entry_schema: string
              default: { get_attribute: [SOURCE, broker_urls]}
            TOPIC_NAME:
              type: string
              default: { get_attribute: [SOURCE, topic_name]}
            IS_JSON_DATA:
              type: boolean
              required: false
            IS_BINARY_KEY:
              type: boolean
              required: false
            IS_BINARY_VALUE:
              type: boolean
              required: false
        inputs:
          EVENT:
            type: radon.datatypes.Event
            default: { get_property: [SELF, events, 1] }
          TRIGGER_NAME:
            type: string
            default: { get_property: [SELF, trigger_name]}