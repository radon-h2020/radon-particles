---
- hosts: all
  vars:
    query_output_port_id: "outputPorts[0].id"
    query_input_port_id: "inputPorts[0].id"
    port: "{{ (lookup('file', '/tmp/nifi.json') | from_json) | default('8080', true) }}"
  tasks:
    # ROOT INFO of source machine
    - name: Get list of available NiFi resources for fetching the ids of root reource group, input port and output port
      uri:
        url: "http://localhost:{{ port }}/nifi-api/resources"
        method: GET
      register: nifi_resources
    # ROOT INFO of destination machine
    - name: Get list of available NiFi resources for fetching the ids of root reource group, input port and output port
      uri:
        url: "http://{{ target_pipeline_server_ip }}:{{ port }}/nifi-api/resources"
        method: GET
      register: nifi_resources_target
    - name: Create input port in the target machine before creating a RPG in the source machine
      vars:
        query_rootPG_id_target: "resources[?name=='NiFi Flow' && starts_with(identifier, '/process-groups/')].identifier"
        targetRootPG_ID: "{{ nifi_resources_target.json  | to_json | from_json | json_query(query_rootPG_id_target) | first }}"
      uri:
        url: "http://{{ target_pipeline_server_ip }}:{{ port }}/nifi-api/process-groups/{{ targetRootPG_ID.split('/')[2] }}/input-ports"
        method: POST
        body:
          "revision":
            "version": 0
          "component":
            "name": "rcvFromRmt"
        status_code: 201
        body_format: json
      register: target_input_port_info
    # INPUT PORT INFO of the target PIPELINE
    - name: Get the list of input port of target pipeline
      uri:
        url: "http://{{ target_pipeline_server_ip }}:{{ port }}/nifi-api/process-groups/{{ target_pipeline_id }}/input-ports"
        method: GET
      register: target_input_ports_list
    - name: create the connection between target input port id and target pipeline
      vars:
        target_input_port_id: "{{ target_input_ports_list.json  | to_json | from_json | json_query(query_input_port_id) }}"
        query_rootPG_id_target: "resources[?name=='NiFi Flow' && starts_with(identifier, '/process-groups/')].identifier"
        targetRootPG_ID: "{{ nifi_resources_target.json  | to_json | from_json | json_query(query_rootPG_id_target) | first }}"
      uri:
            url: http://{{ target_pipeline_server_ip }}:{{ port }}/nifi-api/process-groups/{{ targetRootPG_ID.split('/')[2] }}/connections
            method: POST
            body:
              "revision":
                 "version": 0
              "component":
                "source":
                    "id": "{{ target_input_port_info.json.component.id }}"  # UPDATE THIS with the id of the newly created Input port in the root proces group
                    "groupId": "{{ targetRootPG_ID.split('/')[2] }}"
                    "type": "INPUT_PORT"
                "destination":
                    "id": "{{ target_input_port_id }}"
                    "groupId": "{{ target_pipeline_id }}"
                    "type": "INPUT_PORT"
            status_code: 201
            body_format: json
    - name: start the root input port of the target machine
      uri:
          url: http://{{ target_pipeline_server_ip }}:{{ port }}/nifi-api/input-ports/{{ target_input_port_info.json.component.id }}/run-status
          method: PUT
          body:
            "revision":
                 "version": "{{ target_input_port_info.json.revision.version }}"
            "state": "RUNNING"
          status_code: 200
          body_format: json
    - name: Create a RPG in the SOURCE server
      vars:
        query_rootPG_id: "resources[?name=='NiFi Flow' && starts_with(identifier, '/process-groups/')].identifier"
        rootPG_ID: "{{ nifi_resources.json  | to_json | from_json | json_query(query_rootPG_id) | first }}"
      uri:
            url: http://localhost:{{ port }}/nifi-api/process-groups/{{ rootPG_ID.split('/')[2] }}/remote-process-groups
            method: POST
            body:
              "revision":
                 "version": 0
              "component":
                  "targetUri": "http://{{ target_pipeline_server_ip }}:{{ port }}/nifi/"
                  "transportProtocol": "HTTP"
            status_code: 201
            body_format: json
      register: newRPG
    - name: new RPG creation data
      copy:
        dest: /tmp/newRPG.txt
        content: "{{ newRPG }}"
    # OUTPUT PORT INFO
    - name: Get the list of output port of source pipeline
      uri:
        url: "http://localhost:{{ port }}/nifi-api/process-groups/{{ source_pipeline_id }}/output-ports"
        method: GET
      register: output_ports_list
    # INPUT PORT INFO
    - name: Get the list of input port of new RPG
      uri:
        url: "http://localhost:{{ port }}/nifi-api/remote-process-groups/{{ newRPG.json.id }}"
        method: GET
      register: input_ports_list
    - name: RPG information file
      copy:
        dest: /tmp/input_ports_list.txt
        content: "{{ input_ports_list }}"
    - name: create the connection between source pipeline and the new RPG
      vars:
        output_port_id: "{{ output_ports_list.json  | to_json | from_json | json_query(query_output_port_id) }}"
        query_rootPG_id: "resources[?name=='NiFi Flow' && starts_with(identifier, '/process-groups/')].identifier"
        rootPG_ID: "{{ nifi_resources.json  | to_json | from_json | json_query(query_rootPG_id) | first }}"
      uri:
            url: http://localhost:{{ port }}/nifi-api/process-groups/{{ rootPG_ID.split('/')[2] }}/connections
            method: POST
            body:
              "revision":
                 "version": 0
              "component":
                "source":
                    "id": "{{ output_port_id }}"
                    "groupId": "{{ source_pipeline_id }}"
                    "type": "OUTPUT_PORT"
                "destination":
                    "id": "{{ input_ports_list.json.component.contents.inputPorts[0].id }}"
                    "groupId": "{{ newRPG.json.id }}"
                    "type": "REMOTE_INPUT_PORT"
            status_code: 201
            body_format: json
# @TODO: create a input port in the target/destination machine
