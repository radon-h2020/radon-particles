tosca_definitions_version: tosca_simple_yaml_1_3

topology_tmplate:
  inputs:
    cpus:
      type: integer
      description: Number of CPUs for the servers.
      constraints:
        - valid_values: [ 1, 2, 4, 8 ]
    database_server_root_password:
      type: string
    database_name:
      type: string
    database_user:
      type: string
    database_password:
      type: string

  node_templates:
    my_application_server:
      type: Compute
      capabilities:
        host:
          disk_size: 10 GB
          num_cpus: { get_input: cpus}
          mem_size: 1 GB
        os:
          properties:
            architecture: x86_64
            type: Linux
            distribution: ubuntu
            version: 12.04

    my_java_runtime:
      type: radon.nodes.java.JavaRuntime
      capabilities:
        host:
          java_version: 8
          only_jre: true
          headless: false
      requirements:
        - host: my_application_server
      interfaces:
        Standard:
          create:
            implementation: install-java.sh
          delete:
            implementation: uninstall-java.sh

    my_java_application:
      type: radon.nodes.java.JavaApplication
      requirements:
        - host: my_java_runtime
        - db: # not defined in the node type
            node: my_database
            capability: database_endpoint
            relationship: tosca.relationships.ConnectsTo
      artifacts:
        deployment_archive:
          type: radon.artifacts.archive.JAR
          file: application.jar
      interfaces:
        Standard:
          create:
            inputs:
              JAVA_HOME: { get_attribute: [my_java_runtime, java_home] }
              APPLICATION_ARTIFACT: { get_artifact: [SELF, deployment_archive] }
            implementation: deploy-application.sh
          configure:
            inputs:
              DATABASE_PORT: { get_property: [SELF, db, port] }
              DATABASE_NAME: { get_property: [my_database, name] } # can be done similarly for user and password
            implementation: configure-application.sh

    my_database_server:
      type: Compute
      capabilities:
        host:
          disk_size: 10 GB
          num_cpus: { get_input: cpus}
          mem_size: 1 GB
        os:
          properties:
            architecture: x86_64
            type: Linux
            distribution: ubuntu
            version: 12.04

    my_mysql_server:
      type: radon.nodes.mysql.MySQLDBMS
      properties:
        root_password: { get_input: database_server_root_password }
      requirements:
        - host: my_database_server
      interfaces:
        Standard:
          configure:
            implementation: configure-mysql-dbms.sh

    my_database:
      type: radon.nodes.mysql.MySQLDatabase
      properties:
        user: { get_input: database_user }
        password: { get_input: database_password }
        name: { get_input: database_name }
        port: { get_attribute: [HOST, port] }
      capabilites:
        database_endpoint:
          properties:
            port: { get_attribute: [HOST, port] } # or [my_mysql_server, port]
      requirements:
        - host: my_mysql_server
      artifacts:
        database_content:
          type: tosac.artifacts.File
          file: database-initial-content.txt
      interfaces:
        create:
          implementation: create-database.sh
        configure:
          implementation: configure-database.sh
          inputs:
            DATABASE_CONTENT: { get_artifact: [SELF, database_content]} # new input

  outputs:
    application_url:
      value: { get_attribute: [my_application_server, public_address] }
