tosca_definitions_version: tosca_simple_yaml_1_0

#---------------------------------------------------------------------------
# Copyright (c) 2019 Contributors to the RADON project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#---------------------------------------------------------------------------

node_types:
  radon.nodes.apache.kafka.KafkaTopic:
    derived_from: tosca.nodes.Root
    attributes:
      broker_urls:
        description: represents a list of one or more urls that corresponds to the brokers of the kafka cluster this topic is hosted on
        type: list
        entry-schema:
          type: string
        default: { get_attribute: [HOST, broker_urls] }
    properties:
      topic_name:
        type: string
        required: true
        constraints:
          - pattern: "[-_A-Za-z0-9]+"
      partitions:
        type: integer
        required: false
        default: 1
      replicas:
        type: integer
        required: false
        default: 1
      min_insync_replicas:
        type: integer
        required: false
        default: 1
        constraints:
          - greater_or_equal: 0
      retention:
        type: integer
        required: false
        default: 10080
        constraints:
          - greater_or_equal:
      roll_time:
        type: integer
        required: false
        default: 10080
        constraints:
          - greater_or_equal: 1
      segment_size:
        type: integer
        required: false
        default: 1000000
        constraints:
          - greater_or_equal: 1
    capabilities:
      kafka_topic:
        type: radon.capabilities.kafka.KafkaTopic
        occurrences: [0, UNBOUNDED]
    requirements:
      - host:
          capability: radon.capabilities.kafka.KafkaHosting
          relationship: tosca.relationships.HostedOn
      - openwhisk_invoker:
          capability: radon.capabilities.Invocable
          relationship: radon.relationships.apache.openwhisk.KafkaTriggers
          node: radon.nodes.apache.openwhisk.OpenWhiskFunction
          occurrences: [0,UNBOUNDED]
      - openfaas_invoker:
          capability: radon.capabilities.Invocable
          relationship: radon.relationships.openfaas.KafkaTriggers
          node: radon.nodes.openfaas.OpenFaaSFunction
          occurrences: [0,UNBOUNDED]
    interfaces:
      Standard:
        create:
          inputs:
            TOPIC_NAME:
              default: { get_property: [SELF, topic_name] }
            PARTITIONS:
              type: integer
              default: { get_property: [SELF, partitions] }
            REPLICAS:
              type: integer
              default: { get_property: [SELF, replicas] }
            MIN_INSYNC_REPLICAS:
              type: integer
              default: { get_property: [SELF, min_insync_replicas] }
            RETENTION:
              type: integer
              default: { get_property: [SELF, retention] }
            SEGMENT_SIZE:
              type: integer
              default: { get_property: [SELF, segment_size] }
            ROLL_TIME:
              type: integer
              default: { get_property: [SELF, roll_time] }