tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
  radon.nodes.apache.kafka.KafkaBroker:
    derived_from: radon.nodes.java.JavaApplication
    properties:
      component_version:
        type: version
        default: 0.10.2.2
        constraints:
          - valid_values: [0.10.2.2, 0.11.0.3]
      scala_version:
        type: version
        default: 2.11
        constraints:
          - valid_values: [2.11, 2.12]
      kf_heap_size:
        type: integer
        default: 1024
      zk_heap_size:
        type: integer
        default: 500
      log_cleaner_enable:
        type: boolean
        default: false
    attributes:
      java_home:
        type: string
        default: { get_attribute: [ HOST, java_home ] }
      kafka_home:
        type: string
        default: { get_operation_output: [ SELF, Standard, create, KAFKA_HOME ] }
        broker_urls:
          description: represents a list of one or more urls that corresponds to the brokers of this kafka cluster
          type: list
          entry-schame:
            type: string
    capabilities:
      host:
        type: radon.capabilities.kafka.KafkaHosting
        valid_source_types: [radon.nodes.apache.kafka.KafkaTopic]
        occurrences: [0, UNBOUNDED]
    interfaces:
      Standard:
        create:
          inputs:
            KAFKA_VERSION:
              type: version
              default: { get_property: [SELF, component_version] }
            SCALA_VERSION:
              type: version
              default: { get_property: [SELF, scala_version] }
        configure:
          inputs:
            IP_ADDRESS:
              default: { get_attribute: [HOST, public_address] }
            LOG_CLEANER_ENABLE:
              type: boolean
              default: { get_property: [SELF, log_cleaner_enable] }
            JAVA_HOME:
              default: { get_attribute: [SELF, java_home] }
            KAFKA_HOME:
              default: { get_attribute: [SELF, kafka_home] }
            KF_HEAP_SIZE:
              type: integer
              default: { get_property: [SELF, kf_heap_size] }
            ZK_HEAP_SIZE:
              type: integer
              default: { get_property: [SELF, zk_heap_size] }
        start:
          inputs:
            KAFKA_HOME:
              default: { get_attribute: [SELF, kafka_home] }
            JAVA_HOME:
              default: { get_attribute: [SELF, java_home] }
        stop:
          inputs:
            KAFKA_HOME:
              default: { get_attribute: [SELF, kafka_home] }
            JAVA_HOME:
              default: { get_attribute: [SELF, java_home] }
