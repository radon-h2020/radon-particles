  ##########################################################################
  # Copyright (c) 2019 Contributors to the RADON project
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  ##########################################################################
---
- hosts: all
  vars:
    get_id1: "processors[?component.name=='ListGCSBucket'].id"
    # This will return the putlambda processor id (not the other processors)
    # get_id2: ""processors[?component.name==''].id""
    dest_cred_file_path: "/tmp/.opera/gcs/cred"
    port: "{{ (lookup('file', '/tmp/nifi.json') | from_json) | default('8080', true) }}"
  tasks:
    - name: create directory for cred file
      file:
        path: "{{ dest_cred_file_path }}"
        state: directory
    - name: Upload the credentials file to the current directory.
      copy:
        src: "{{ credential_JSON_file }}"
        dest: "{{ dest_cred_file_path }}/credentials.json"
      # when: cred_file_path != "none" or cred_file_path != "None"
    - name: Get list of available NiFi processors within the process group
      uri:
        url: "http://localhost:{{ port }}/nifi-api/process-groups/{{ pipeline_id }}/processors"
        method: Get
      register: nifi_resources
      # when: cred_file_path != "none" or cred_file_path != "None"
    - name: Configure the first processor within the process group
      vars:
        first_prcsr_id: "{{ nifi_resources.json  | to_json | from_json | json_query(get_id1) | first }}"
        schedulingPeriodValue: "{{ '0 sec' if schedulingStrategy == 'EVENT_DRIVEN' else schedulingPeriodCRON }}"
        schedulingStrategyValue: "{{ 'TIMER_DRIVEN' if schedulingStrategy == 'EVENT_DRIVEN' else schedulingStrategy }}"
      uri:
        url: "http://localhost:{{ port }}/nifi-api/processors/{{ first_prcsr_id }}"
        method: PUT
        body:
          "revision": {"version": 0}
          "component":
            "id": "{{ first_prcsr_id }}"
            "config":
              "properties": {
                # "Credentials File": "{{ dest_cred_file_path }}/credentials",
                "gcs-bucket":"{{ bucket }}",
                "gcp-project-id": "{{ project_ID }}"
              }
              "schedulingStrategy": "{{ schedulingStrategyValue }}"
              "schedulingPeriod": "{{ schedulingPeriodValue }}"
        status_code: 200
        body_format: json
    - name: Get id of the first processor within the process group.
      vars:
        first_prcsr_id: "{{ nifi_resources.json  | to_json | from_json | json_query(get_id1) | first }}"
      uri:
        url: "http://localhost:{{ port }}/nifi-api/processors/{{ first_prcsr_id }}"
        method: Get
      register: first_prcsr_id
    - name: get the id of the controller and enabled it
      vars:
        GCPcontrollerID: "{{ first_prcsr_id.json.component.config.properties['GCP Credentials Provider Service'] }}"
      uri:
        url: "http://localhost:{{ port }}/nifi-api/controller-services/{{ GCPcontrollerID }}"
        method: PUT
        body:
          "revision":
              "version": 0
          "component":
            "id": "{{ GCPcontrollerID }}"
            "state": "ENABLED"
          "status":
            "runStatus": "ENABLED"
        body_format: json
