tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
  radon.nodes.aws.AwsLambdaFunctionFromS3:
    derived_from: radon.nodes.abstract.Function
    metadata:
      targetNamespace: "radon.nodes.aws"
      abstract: "false"
      final: "false"
    attributes:
      role_arn:
        description: AWS function's role ARN
        type: string
      arn:
        description: AWS function's Amazon Resource Name (ARN)
        type: string
      region:
        type: string
    properties:
      handler:
        type: string
        description: Handler for lambda function
        default: "index.handler"
      s3_bucket_key:
        type: string
        description: The S3 key aka. filename referencing the file to be deployed
      memory:
        type: integer
        description: Function memory in MB
        default: 128
      memory_range:
        type: range
        description: Range of function memory in MB to search
        required: false
      alias:
        type: string
        description: Lambda function's alias
        required: false
        default: "dev"
      runtime:
        type: string
        description: Function runtime (List of possible values - https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html)
        default: "nodejs"
      concurrency_range:
        type: range
        description: Range of function concurrency to search
        required: false
      statement_id:
        type: string
        description: Lambda policy statement identifier
      s3_bucket_name:
        type: string
        description: The S3 bucket name containing the function package to be deployed
      timeout:
        type: integer
        description: Function timeout in seconds
        default: 300
      concurrency:
        type: integer
        description: Function concurrency
        required: false
        default: 0
      env_vars:
        type: map
        description: Function's environment variables
        required: false
        entry_schema:
          type: string
    requirements:
      - host:
          capability: tosca.capabilities.Container
          node: radon.nodes.aws.AwsPlatform
          relationship: tosca.relationships.HostedOn
          occurrences: [ 1, 1 ]
      - monitor:
          capability: radon.capabilities.monitoring.Monitor
          node: radon.nodes.monitoring.PushGateway
          relationship: radon.relationships.monitoring.AWSIsMonitoredBy
          occurrences: [ 0, UNBOUNDED ]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        inputs:
          lambda_runtime:
            type: string
            required: true
            default: { get_property: [ SELF, runtime ] }
          lambda_timeout:
            type: integer
            required: true
            default: { get_property: [ SELF, timeout ] }
          lambda_memory:
            type: integer
            required: true
            default: { get_property: [ SELF, memory ] }
          func_alias:
            type: string
            required: true
            default: { get_property: [ SELF, alias ] }
          permission_id:
            type: string
            required: true
            default: { get_property: [ SELF, statement_id ] }
          lambda_handler:
            type: string
            required: true
            default: { get_property: [ SELF, handler ] }
          s3_bucket_name:
            type: string
            required: true
            default: { get_property: [ SELF, s3_bucket_name ] }
          lambda_concurrency:
            type: integer
            required: true
            default: { get_property: [ SELF, concurrency ] }
          env_vars:
            type: string
            required: false
            default: { get_property: [ SELF, env_vars ] }
          s3_bucket_key:
            type: string
            required: true
            default: { get_property: [ SELF, s3_bucket_key ] }
          aws_region:
            type: string
            required: true
            default: { get_property: [ SELF, host, region ] }
          role_arn:
            type: string
            required: true
            default: { get_attribute: [ SELF, host, role_arn ] }
          function_name:
            type: string
            required: true
            default: { get_property: [ SELF, name ] }
        operations:
          create:
            implementation:
              primary: create
              timeout: 0
          delete:
            implementation:
              primary: delete
              timeout: 0
    artifacts:
      create:
        type: radon.artifacts.Ansible
        file: create.yml
      delete:
        type: radon.artifacts.Ansible
        file: delete.yml
