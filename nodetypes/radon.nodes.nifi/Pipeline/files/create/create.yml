  ##########################################################################
  # Copyright (c) 2019 Contributors to the RADON project
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  ##########################################################################
---
- hosts: all
  vars:
    query: "resources[?name=='{{ template_name }}' && starts_with(identifier, '/templates/')].identifier"
  tasks:
    - name: Copy template file to remote system (shell command requires file to be in remote system)
      copy:
        src: "{{ template_file }}"
        dest: template.xml
    - name: Wait for port 8080 to become open on the host, don't start checking for 4 seconds
      wait_for:
        port: 8080
        delay: 4
    - name: upload template file to NiFi template repository
      shell: 'curl  -X "POST" "http://localhost:8080/nifi-api/process-groups/root/templates/upload" \
                 -H "Content-Type: multipart/form-data" \
                 -k \
                 --form template=@template.xml'
      register: response
    - name: Get list of available NiFi resources for fetching the id of the template by its name
      uri:
        url: http://localhost:8080/nifi-api/resources
        method: Get
      register: nifi_resources
    - name: Initiate the template
      vars:
        template_id: "{{ nifi_resources.json  | to_json | from_json | json_query(query) | first }}"
      uri:
        url: http://localhost:8080/nifi-api/process-groups/root/template-instance
        method: POST
        body:
          "originX": 2.0
          "originY": 3.0
          "templateId": "{{ template_id.split('/')[2] }}"
        status_code: 201
        body_format: json
      register: pipeline_info
    - name: Ansible create file if it doesn't exist example
      copy:
        dest: "/tmp/pipeline_info{{ template_name }}.txt"
        content: "pipeline_info are : {{ pipeline_info }}"
## FOR REMOTE-PROCESS-GROUP
    - name: Set pipeline id property value (remoteProcessGroups)
      set_stats:
        data:
          id: "{{ pipeline_info.json.flow.remoteProcessGroups[0].id }}"
          pipeline_type: "remoteProcessGroups"
      when: pipeline_info.json.flow.remoteProcessGroups|length > 0
      register: id
    - name: Ansible create file if it doesn't exist example
      copy:
        dest: "/tmp/id_remoteProcessGroups.txt"
        content: "{{ pipeline_info.json.flow.remoteProcessGroups[0].id }}"
      when: pipeline_info.json.flow.remoteProcessGroups|length > 0
## set PROCESS-GROUP
    - name: Set pipeline id property value (process-groups)
      set_stats:
        data:
          id: "{{ pipeline_info.json.flow.processGroups[0].id }}"
          pipeline_type: "processGroups"
      when: pipeline_info.json.flow.processGroups|length > 0
    - name: Ansible create file if it doesn't exist example
      copy:
        dest: "/tmp/id_processGroups.txt"
        content: "{{ pipeline_info.json.flow.processGroups[0].id }}"
      when: pipeline_info.json.flow.processGroups|length > 0
